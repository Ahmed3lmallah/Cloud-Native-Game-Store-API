openapi: 3.0.0
info:
  title: Admin Api Service
  description:
    The Admin API is a BFF edge service that contains all the endpoints for CRUD operations of the following - Customers, Products, Inventory, Orders, and Level Up Points
  version: 0.0.1
servers:
  - url: 'http://localhost:8282'
    description: Localhost - Port No. 8282
paths:
  /inventory:
    get:
      summary: Retrieves All Inventory Items from the database
      responses:
        '200':
          description: A list of Inventory Items.
          content:
            array:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InventoryViewModel'
    post:
      summary: Creates a new Inventory entry.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Inventory'
      responses:
        '201':
          description: An Inventory Item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryViewModel'
        '422':
          description: Incomplete Inventory Item information.
          
  /inventory/{id}:
    get:
      summary: Retrieves the Inventory Item with the given ID.
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the Inventory Item you would like to retrieve.
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: An Inventory Item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryViewModel'
        '404':
          description: Inventory Item ID cannot be found in DB.
    
    delete:
      summary: Deletes the Inventory Item with the given ID.
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the Inventory Item you would like to delete.
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: success message.
          content:
            text/plain:
              schema:
                type: string
                example: "Inventory [1] deleted successfully!"
        '404':
          description: Inventory Item ID cannot be found in DB.
          
    put:
      summary: Update the Inventory Item with the given ID.
      parameters: 
        - name: id
          in: path
          required: true
          description: id of the Inventory Item you want to update
          schema:
            type: integer
            format: int64
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Inventory'
      responses:
        '200':
          description: An Inventory Item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryViewModel'
        '404':
          description: Inventory Item ID cannot be found in DB.
        '422':
          description: Incomplete Inventory Item information [OR] Ids doesn't match.
          
  /products:
    get:
      summary: Retrieves All Products from the database
      responses:
        '200':
          description: A list of Products
          content:
            array:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductViewModel'
    post:
      summary: Creates a new Product entry.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductViewModel'
      responses:
        '201':
          description: A Product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductViewModel'
        '422':
          description: Incomplete Product information.
          
  /products/{id}:
    get:
      summary: Retrieves the Product with the given ID.
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the Product you would like to retrieve.
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: A Product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductViewModel'
        '404':
          description: Product ID cannot be found in DB.
    
    delete:
      summary: Deletes the Product with the given ID.
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the Product you would like to delete.
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: success message.
          content:
            text/plain:
              schema:
                type: string
                example: "Product [1] deleted successfully!"
        '404':
          description: Product ID cannot be found in DB.
          
    put:
      summary: Update the Product with the given ID.
      parameters: 
        - name: id
          in: path
          required: true
          description: id of the Product you want to update
          schema:
            type: integer
            format: int64
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductViewModel'
      responses:
        '200':
          description: A Product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductViewModel'
        '404':
          description: Product ID cannot be found in DB.
        '422':
          description: Incomplete Product information [OR] Ids doesn't match.
          
  /customers:
    get:
      summary: Retrieves All Customers from the database
      responses:
        '200':
          description: A list of Customers
          content:
            array:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CustomerViewModel'
    post:
      summary: Creates a new Customer entry.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerViewModel'
      responses:
        '201':
          description: A Customer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerViewModel'
        '422':
          description: Incomplete Customer information.
          
  /customers/{id}:
    get:
      summary: Retrieves the Customer with the given ID.
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the Customer you would like to retrieve.
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: A Customer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerViewModel'
        '404':
          description: Customer ID cannot be found in DB.
    
    delete:
      summary: Deletes the Customer with the given ID.
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the Customer you would like to delete.
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: success message.
          content:
            text/plain:
              schema:
                type: string
                example: "Customer [1] deleted successfully!"
        '404':
          description: Customer ID cannot be found in DB.
          
    put:
      summary: Update the Customer with the given ID.
      parameters: 
        - name: id
          in: path
          required: true
          description: id of the Customer you want to update
          schema:
            type: integer
            format: int64
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerViewModel'
      responses:
        '200':
          description: A Customer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerViewModel'
        '404':
          description: Customer ID cannot be found in DB.
        '422':
          description: Incomplete Customer information [OR] Ids doesn't match.
          
  /levelup:
    get:
      summary: Retrieves All LevelUp entries from the database
      responses:
        '200':
          description: A list of LevelUp entries.
          content:
            array:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LevelUpViewModel'
    post:
      summary: Creates a new LevelUp entry.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LevelUp'
      responses:
        '201':
          description: An LevelUp entry
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LevelUpViewModel'
        '422':
          description: Incomplete LevelUp information.
          
  /levelup/{id}:
    get:
      summary: Retrieves the LevelUp entry with the given ID.
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the LevelUp entry you would like to retrieve.
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: A LevelUp Entry
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LevelUpViewModel'
        '404':
          description: LevelUp Entry ID cannot be found in DB.
    
    delete:
      summary: Deletes the LevelUp Entry with the given ID.
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the LevelUp Entry you would like to delete.
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: success message.
          content:
            text/plain:
              schema:
                type: string
                example: "LevelUp! [1] deleted successfully!"
        '404':
          description: LevelUp Entry ID cannot be found in DB.
          
    put:
      summary: Update the LevelUp Entry with the given ID.
      parameters: 
        - name: id
          in: path
          required: true
          description: id of the LevelUp Entry you want to update
          schema:
            type: integer
            format: int64
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LevelUp'
      responses:
        '200':
          description: A LevelUp Entry
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LevelUpViewModel'
        '404':
          description: LevelUp Entry ID cannot be found in DB.
        '422':
          description: Incomplete LevelUp Entry information [OR] Ids doesn't match.
 
  /levelup/customer/{customerId}:
    get:
      summary: Retrieves the LevelUp entry for a given customer using customerId.
      parameters:
        - name: customerId
          in: path
          required: true
          description: Customer ID of the LevelUp entry you would like to retrieve.
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: A LevelUp Entry
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LevelUpViewModel'
        '404':
          description: LevelUp Entry ID cannot be found in DB.
          
  /invoices:
    get:
      summary: Retrieves All Invoices from the database
      responses:
        '200':
          description: A list of Invoices.
          content:
            array:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InvoiceViewModel'
    post:
      summary: Creates a new Invoice entry.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Invoice'
      responses:
        '201':
          description: An Invoice Item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceViewModel'
        '422':
          description: Incomplete Invoice information.
          
  /invoices/{id}:
    get:
      summary: Retrieves the Invoice with the given ID.
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the Invoice Item you would like to retrieve.
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: An Invoice Item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceViewModel'
        '404':
          description: Invoice ID cannot be found in DB.
    
    delete:
      summary: Deletes the Invoice with the given ID.
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the Invoice you would like to delete.
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: success message.
          content:
            text/plain:
              schema:
                type: string
                example: "Invoice [1] deleted successfully!"
        '404':
          description: Invoice ID cannot be found in DB.
          
    put:
      summary: Update the Invoice with the given ID.
      parameters: 
        - name: id
          in: path
          required: true
          description: id of the Invoice you want to update
          schema:
            type: integer
            format: int64
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Invoice'
      responses:
        '200':
          description: An Invoice Item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceViewModel'
        '404':
          description: Invoice ID cannot be found in DB.
        '422':
          description: Incomplete Invoice information [OR] Ids doesn't match.
  
  /invoices/customer/{customerId}:
    get:
      summary: Retrieves All Invoices for a given customer by customer Id.
      parameters: 
        - name: customerId
          in: path
          required: true
          description: id of the customer you want to get invoices for.
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: A list of Invoices.
          content:
            array:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InvoiceViewModel'        
components:
  schemas:
    
    LevelUp:
      properties:
        levelUpId:
          type: integer
        customerId:
          type: integer
        points:
          type: integer
        memberDate:
          type: string
      required: 
        - customerId
        - points
        - memberDate
    LevelUpViewModel:
      properties:
        levelUpId:
          type: integer
        customerId:
          $ref: '#/components/schemas/CustomerViewModel'
        points:
          type: integer
        memberDate:
          type: string
    
    CustomerViewModel:
      properties:
        customerId:
          type: integer
        firstName: 
          type: string
        lastName:
          type: string
        street:
          type: string
        city:
          type: string
        zip:
          type: string
        email:
          type: string
        phone:
          type: string
      required: 
        - firstName
        - lastName
        - street
        - city
        - zip
        - email
        - phone
    
    ProductViewModel:
      properties:
        productId:
          type: integer
        productName: 
          type: string
        productDescription :
          type: string
        listPrice:
          type: number
        unitCost:
          type: number
      required: 
        - productName
        - productDescription
        - listPrice
        - unitCost
    
    Inventory:
      properties:
        inventoryId:
          type: integer
        productId:
          type: integer
        quantity:
          type: integer
      required: 
        - productId
        - quantity     
    InventoryViewModel:
      properties:
        inventoryId:
          type: integer
        product:
          $ref: '#/components/schemas/ProductViewModel'
        quantity:
          type: integer
    
    Invoice:
      properties:
        invoiceId:
          type: integer
        customerId:
          type: integer
        purchaseDate:
          type: string
        invoiceItems:
          type: array
          items:
            $ref: '#/components/schemas/InvoiceItem'
      required: 
        - customerId
        - purchaseDate
        - invoiceItems
    InvoiceItem:
      properties:
        invoiceItemId:
          type: integer
        invoiceId:
          type: integer
        inventoryId:
          type: integer
        quantity:
          type: integer
        unitPrice:
          type: number
      required: 
        - inventoryId
        - quantity
        - unitPrice
    
    InvoiceViewModel:
      properties:
        invoiceId:
          type: integer
        customer:
          $ref: '#/components/schemas/CustomerViewModel'
        purchaseDate:
          type: string
        invoiceItems:
          type: array
          items:
            $ref: '#/components/schemas/InvoiceItemViewModel'
        memberPoints:
          type: integer
    InvoiceItemViewModel:
      properties:
        invoiceItemId:
          type: integer
        invoiceId:
          type: integer
        inventory:
          $ref: '#/components/schemas/InventoryViewModel'
        quantity:
          type: integer
        unitPrice:
          type: number
      required: 
        - inventoryId
        - quantity
        - unitPrice      
          